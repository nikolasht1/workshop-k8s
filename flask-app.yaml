---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: flask-app
data:
  mysql-password: "ZGV2b3BzCg=="
  mysql-root-password: "bXktc2VjcmV0LXB3Cg=="
--- 
apiVersion: v1
kind: ConfigMap
metadata:
  name: flask-config
  namespace: flask-app
data:
  flask-name: flask
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: flask-pv-claim
  labels:
    name: flask-pv
  namespace: flask-app
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask
  labels:
    app: flask
  namespace: flask-app
spec:
  replicas: 1
  selector:
    matchLabels: 
      app: flask
  template:
    metadata:
      labels:
        app: flask
    spec:        
      containers:
        - name: flask
          image: nikolasht1/flaskapi
          imagePullPolicy: IfNotPresent
          env:
            - name: FLASK_APP
              value: api.py
            - name: FLASK_ENV
              value: development
            - name: DB_USERNAME
              value: devops
            - name: DB_NAME
              value: mysql
            - name: DB_HOSTNAME
              value: mysql
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-password
          resources:
            limits:
              memory: "256Mi"
              cpu: "300m"
            requests:
              memory: "256Mi"
              cpu: "200m"
          ports:
            - containerPort: 5000
              name: flask
          startupProbe:
            httpGet:
              path: /api/health-check/ok
              port: flask
            failureThreshold: 5
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /api/health-check/ok
              port: flask
            failureThreshold: 5
            periodSeconds: 10
          volumeMounts:
            - name: flask-persistent-storage
              mountPath: /flask/app
      volumes:
        - name: flask-persistent-storage
          persistentVolumeClaim:
            claimName: flask-pv-claim

---
apiVersion: v1
kind: Service
metadata:
  name: flask
  namespace: flask-app
spec:
  selector:
    name: flask
  ports:
    - protocol: TCP
      port: 5000
      targetPort: flask
      name: flask-svc